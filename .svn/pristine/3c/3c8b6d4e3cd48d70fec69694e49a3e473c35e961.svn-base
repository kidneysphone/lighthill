# -*- coding: utf-8 -*-  
#coding=utf-8  
import tushare as ts
import pymongo as mongo
import json
import thread
import threading
import datetime
import time
import methods
import strategy
import httplib
import serverConfig
import traceback
CONN_ADDR1 = 's-m5ee3f385a65d4d4.mongodb.rds.aliyuncs.com:3717'
# CONN_ADDR2 = 's-m5eb2244234d5944.mongodb.rds.aliyuncs.com:3717'
username = 'root'
password = 'Liangdian123'
# 获取mongoclient
c = mongo.MongoClient([CONN_ADDR1])
# 授权. 这里的user基于admin数据库授�?
c.admin.authenticate(username, password)
# CONN_ADDR1 = 's-m5e9656f4072c8d4.mongodb.rds.aliyuncs.com:3717'
# CONN_ADDR2 = 's-m5e7370f67573e34.mongodb.rds.aliyuncs.com:3717'
# username = 'root'
# password = 'Liangdian123'
# #获取mongoclient
# c = mongo.MongoClient([CONN_ADDR1, CONN_ADDR2])
# #授权. 这里的user基于admin数据库授�?
# c.admin.authenticate(username, password)
codelist = c.db['codelist']
daily5 = c.daily5;
serverCount = 2;
serverNo = serverConfig.serverNo;
count = 0;
step = 30;
timer_interval = 5*60;
def savedaily5_quotes(code,thread):
    now = datetime.datetime.now();
    date = now.strftime("%Y-%m-%d");
    
    ctime = now.strftime("%H:%M:%S");
    if(ctime>'15:06:00'):
        exit();
    print (str(code) + " @ " + str(now))
    # if(serverNo==2):
    #     daily5['sh'].delete_many({'date':{'$gt':date}});
    #     daily5['sz'].delete_many({'date':{'$gt':date}});
    #     daily5['hs300'].delete_many({'date':{'$gt':date}});
    #     daily5['sz50'].delete_many({'date':{'$gt':date}});
    #     daily5['zxb'].delete_many({'date':{'$gt':date}});
    #     daily5['cyb'].delete_many({'date':{'$gt':date}});
    #     sh = ts.get_hist_data('sh',ktype='5',start=date);
    #     sz = ts.get_hist_data('sz',ktype='5',start=date);
    #     hs300 = ts.get_hist_data('hs300',ktype='5',start=date);
    #     sz50 = ts.get_hist_data('sz50',ktype='5',start=date);
    #     zxb = ts.get_hist_data('zxb',ktype='5',start=date);
    #     cyb = ts.get_hist_data('cyb',ktype='5',start=date);
    #     sh['date'] = sh['open'].keys();
    #     sz['date'] = sz['open'].keys();
    #     hs300['date'] = hs300['open'].keys();
    #     sz50['date'] = sz50['open'].keys();
    #     zxb['date'] = zxb['open'].keys();
    #     cyb['date'] = cyb['open'].keys();
    #     daily5['sh'].insert(json.loads(sh.to_json(orient='records')));
    #     daily5['sz'].insert(json.loads(sz.to_json(orient='records')));
    #     daily5['hs300'].insert(json.loads(hs300.to_json(orient='records')));
    #     daily5['sz50'].insert(json.loads(sz50.to_json(orient='records')));
    #     daily5['zxb'].insert(json.loads(zxb.to_json(orient='records')));
    #     daily5['cyb'].insert(json.loads(cyb.to_json(orient='records')));
    for c in code:
        collection = daily5[c];
        try:
            last = daily5[c].find({}).sort([("date",mongo.DESCENDING)]).limit(1);

            last = list(last);
           # print last
            last = last[0];
            #print last
            #print last['date'];
            d1 = datetime.datetime.strptime(last['date'],'%Y-%m-%d %H:%M:%S');
          #  print d1
            d2 = d1 + datetime.timedelta(minutes=1);
           # print d2
            d3 = d2.strftime('%Y-%m-%d %H:%M:%S');
            #print d3
            tt = ts.get_hist_data(c,ktype='5',start= str(d1));
            if(not tt.empty):
             #   print c,'tt not empty';
                #last = daily[c].find({}).sort([("date",mongo.DESCENDING)]).limit(1);
                #print c,'after last';
                tt['date'] = tt['open'].keys();
              #  print tt['date']
                daily5[c].insert(json.loads(tt.to_json(orient='records')));
                tt1=ts.get_k_data(c,ktype='5',start = str(d1))
                if (tt1 is not None):
                    tt1 = json.loads(tt1.to_json(orient='records'));
                    for kdata in tt1:
                        kdate = kdata['date'];
                        kdate = str(kdate) + ":00";
                        record = daily5[c].find_one({'date': kdate});
                        if (record is not None):
                            high_qfq = kdata['high'];
                            low_qfq = kdata['low'];
                            open_qfq = kdata['open'];
                            close_qfq = kdata['close'];
               #             print close_qfq
                            daily5[c].update({'_id': record['_id']}, {
                                '$set': {'high_qfq': high_qfq, 'low_qfq': low_qfq, 'open_qfq': open_qfq,
                                         'close_qfq': close_qfq}});
                            stri = "{";
                            for key, value in record.items():
                                stri = stri + "\"%s\":\"%s\"" % (key, value) + ",";
                            stri = stri[0:len(stri) - 1] + "}";
                            conn = httplib.HTTPConnection("weixin.aitradeapp.com");
                #            print conn
                            result = conn.request('GET','/app/index.php?i=72&c=entry&do=util&m=ld_financial&op=daily5&p=update&code=' + c + '&data=' + stri + '&date=' + kdate);
                 #           print result
                            result = conn.getresponse();

                            conn.close();
                #print c,'before filter';
                #tt = tt[tt.date>last['date']];
               
                #if(not tt.empty):
               # print c,'after filter is not empty';
               # print tt;
                   # real = cdb.realtime['all'].find({'code':c,'date':date}).sort([("date",mongo.DESCENDING),("time",mongo.DESCENDING)]).limit(1);
                    #real = list(real);
                    #print 'len of real:',len(real);
                    #if(len(real)>0):
                        #tt['amount'] = list(real)[0]['amount'];

                print c;
                #stra1 = threading.Thread(target=update,args=(c,json.loads(tt.to_json(orient='records')),collection,));
                #stra1.start();
        except Exception,e :
            traceback.print_exc()
    t1 = threading.Timer(timer_interval,savedaily5_quotes,(code,thread,));
    t1.start();


def update(code,records,collection):
    for record in records:
        methods.updateRecord(code,record['date'],collection);
def getcode(skip):
    arr = []
    try:
        codea = codelist.find({'timeToMarket':{'$gt':0}}).sort('code').skip(skip).limit(step)
        # print codea
        for item in codea:
            arr.append(item['code'])
    except Exception,e:
        print Exception,":",e
    return arr
def getneedsolve(isfirst=False,serverCount=2):
    count = codelist.find({'timeToMarket':{'$gt':0}}).count()
    ava = int(count/serverCount);
    if(isfirst):
        return ava + (count-ava*serverCount)
    else:
        return ava
def getoffsets(serverNo):
    firstSolve = 0;
    if(serverNo==1):
        needsolve = getneedsolve(True,serverCount)
    else:
        firstSolve = getneedsolve(True,serverCount)
        needsolve = getneedsolve()
    if(serverNo - 1>0):
        offset1 = 1
    else:
        offset1 = 0
    if(serverNo - 2>0):
        offset2 = serverNo - 2
    else:
        offset2 = 0
    return offset1,offset2,firstSolve
offset1,offset2,firstSolve = getoffsets(serverNo);
if(serverNo==1):
    needsolve = getneedsolve(True,serverCount);
else:
    needsolve = getneedsolve(False,serverCount);
while(needsolve>0):
    now = datetime.datetime.now();
    date1 = now.strftime("%Y%m%d");
    
    conn = httplib.HTTPConnection("www.easybots.cn");
    conn.request('GET','/api/holiday.php?d='+date1);
    result = conn.getresponse();
    j = json.loads(result.read());
    conn.close();
    if(j[date1]=='0'):
        code = getcode(count*step+offset1*firstSolve+offset2*needsolve)
        count += 1;
        needsolve -= step;
        t=threading.Timer(0,savedaily5_quotes,(code,count));
        t.start();
    else:
        exit();

